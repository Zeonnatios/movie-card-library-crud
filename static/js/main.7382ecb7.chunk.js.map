{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","genre","rating","step","min","max","to","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","MovieCard","data-testid","src","alt","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","SUCCESS_STATUS","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","EditMovie","loading","getMovieById","updatedMovie","map","movieAPI","a","match","params","movieById","MovieDetails","deleteMovie","filter","status","MovieList","getMovies","allMovies","NewMovie","newMovie","movieData","nextId","length","NotFound","App","exact","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7382ecb7.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"center\">\n        <div className=\"loading\"></div>\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          <p>Título:</p>\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={title}\n            onChange={(event) => this.updateMovie('title', event.target.value)}\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          <p> Subtítulo</p>\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={subtitle}\n            onChange={(event) =>\n              this.updateMovie('subtitle', event.target.value)\n            }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_image\">\n          <p>Link da Imagem</p>\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={imagePath}\n            onChange={(event) =>\n              this.updateMovie('imagePath', event.target.value)\n            }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          <p>Sinopse</p>\n          <textarea\n            id=\"movie_storyline\"\n            value={storyline}\n            onChange={(event) =>\n              this.updateMovie('storyline', event.target.value)\n            }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          <p>Gênero</p>\n          <select\n            id=\"movie_genre\"\n            value={genre}\n            onChange={(event) => this.updateMovie('genre', event.target.value)}\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          <p>Avaliação</p>\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={0.1}\n            min={0}\n            max={5}\n            value={rating}\n            onChange={(event) => this.updateMovie('rating', event.target.value)}\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <Link to=\"/\">\n          <button\n            className=\"button-forms\"\n            type=\"button\"\n            onClick={this.handleSubmit}\n          >\n            Salvar\n          </button>\n        </Link>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"form\">\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.objectOf(PropTypes.object).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { id, title, subtitle, storyline, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img className=\"movie-card-image\" src={ imagePath } alt={ title } />\n        <div className=\"movie-card-body\">\n          <h4 className=\"movie-card-title\">{ title }</h4>\n          <h5 className=\"movie-card-subtitle\">{ subtitle}</h5>\n          <p className=\"movie-card-storyline\">{ storyline }</p>\n          <p className=\"show-details\">\n            <Link to={ `/movies/${id}` }> VER DETALHES </Link>\n            </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'https://raw.githubusercontent.com/tryber/sd-011-project-movie-card-library-crud/master/public/images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'https://raw.githubusercontent.com/tryber/sd-011-project-movie-card-library-crud/master/public/images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'https://raw.githubusercontent.com/tryber/sd-011-project-movie-card-library-crud/master/public/images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'https://raw.githubusercontent.com/tryber/sd-011-project-movie-card-library-crud/master/public/images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'https://raw.githubusercontent.com/tryber/sd-011-project-movie-card-library-crud/master/public/images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { MovieForm, Loading } from '../components/index';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      movie: {},\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getMovieById = this.getMovieById.bind(this);\n  }\n\n  componentDidMount() {\n    this.getMovieById();\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie);\n  }\n\n  async getMovieById() {\n    const { match: { params: { id } } } = this.props;\n    const movieById = await movieAPI.getMovie(id);\n    this.setState({\n      movie: movieById,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { loading, movie } = this.state;\n\n    if (loading) {\n      return (<Loading />);\n    }\n\n    return (\n      <div data-testid=\"edit-movie\" className=\"columns\">\n        <div className=\"header\">\n          <h1 className=\"title\">Altere as informações do cartão</h1>\n        </div>\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movie: [],\n      loading: true,\n    };\n\n    this.getMovieById = this.getMovieById.bind(this);\n    this.deleteMovie = this.deleteMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.getMovieById();\n  }\n\n  async getMovieById() {\n    const { match: { params: { id } } } = this.props;\n    const movieById = await movieAPI.getMovie(id);\n    this.setState({\n      movie: movieById,\n      loading: false,\n    });\n  }\n\n  deleteMovie(id) {\n    movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    // Change the condition to check the state\n    // if (true) return <Loading />;\n\n    const {\n      movie: { id, title, storyline, imagePath, genre, rating, subtitle },\n    } = this.state;\n    const { loading } = this.state;\n\n    if (loading) {\n      return (<Loading />);\n    }\n\n    return (\n      <div>\n        <div className=\"header\">\n          <h1 className=\"title\">Altere as informações do cartão</h1>\n        </div>\n        <div className=\"movie-list\">\n          <div className=\"movie-card\" data-testid=\"movie-details\">\n            <img\n              className=\"movie-card-image\"\n              src={ imagePath }\n              alt=\"Movie Cover\"\n            />\n            <div className=\"movie-card-body\">\n              <h4 className=\"movie-card-title\">{ title }</h4>\n              <h5 className=\"movie-card-subtitle\">{ `Subtitle: ${subtitle}` }</h5>\n              <p className=\"movie-card-storyline\">{ `Storyline: ${storyline}` }</p>\n              <p className=\"movie-card-storyline\">{ `Genre: ${genre}` }</p>\n            </div>\n            <div className=\"movie-card-rating\">\n              <p className=\"rating\">{ `Rating: ${rating}` }</p>\n            </div>\n            <div className=\"links\">\n              <Link to={ `/movies/${id}/edit` }>EDITAR</Link>\n              <Link to=\"/\">VOLTAR</Link>\n              <Link to=\"/\" onClick={ () => this.deleteMovie(id) }>DELETAR</Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MovieCard, Loading } from '../components/index';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n    this.getMovies = this.getMovies.bind(this);\n  }\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  async getMovies() {\n    const allMovies = await movieAPI.getMovies();\n    this.setState({\n      movies: allMovies,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n\n    // Render Loading here if the request is still happening\n    if (loading) {\n      return (<Loading />);\n    }\n    return (\n      <div>\n        <div className=\"header\">\n          <h1 className=\"title\">Movie Card Library CRUD</h1>\n          <p><Link to=\"/movies/new\">ADICIONAR CARTÃO</Link></p>\n        </div>\n        <div className=\"movie-list\" data-testid=\"movie-list\">\n          {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n  }\n\n  render() {\n    return (\n      <div data-testid=\"new-movie\">\n        <div className=\"header\">\n          <h1 className=\"title\">Preencha o novo cartão</h1>\n        </div>\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { MovieList, MovieDetails, NewMovie, EditMovie, NotFound } from './pages/index';\nimport './App.css';\n\nfunction App() {\n  return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" render={ () => <MovieList /> } />\n          <Route path=\"/movies/new\" render={ () => <NewMovie /> } />\n          <Route\n            path=\"/movies/:id/edit\"\n            render={ (props) => <EditMovie { ...props } /> }\n          />\n          <Route\n            path=\"/movies/:id\"\n            render={ (props) => <MovieDetails { ...props } /> }\n          />\n          <Route path=\"*\" render={ () => <NotFound /> } />\n        </Switch>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}